# -*- coding: utf-8 -*-
"""
process_emt_pipeline_auto():
- EMT faylni (BTS ASCII) sana papkasiga nusxalaydi (nomi avtomatik)
- FULL TXT yaratadi (agar yo‘q bo‘lsa)
- MUSCLE_NAMES ro‘yxatidagi kanallarni alohida TXT’ga saqlaydi
- a->b HR rampadan ECG.txt yaratadi
"""

import os
import re
import shutil
import numpy as np
import pandas as pd
from datetime import datetime
from zoneinfo import ZoneInfo
from typing import List, Dict, Optional


# -------------------------
# Yordamchi funksiyalar
# -------------------------
def _parse_bts_ascii_emt(path: str, encoding: str = "latin1") -> pd.DataFrame:
    """BTS ASCII .emt faylni DataFrame ga o‘qish (sarlavha 'Frame'/'Time' bo‘yicha)."""
    with open(path, "r", encoding=encoding, errors="replace") as f:
        lines = f.readlines()

    header_idx = None
    for i, line in enumerate(lines):
        if "Frame" in line and "Time" in line and "\t" in line:
            header_idx = i
            break
    if header_idx is None:
        raise RuntimeError("Header ('Frame','Time') topilmadi — format o‘zgargan bo‘lishi mumkin.")

    import tempfile
    with tempfile.NamedTemporaryFile("w", delete=False, suffix=".tsv", encoding="utf-8") as tmp:
        tmp.writelines(lines[header_idx:])
        tmp_path = tmp.name

    df = pd.read_csv(tmp_path, sep="\t")
    os.remove(tmp_path)
    df.columns = [str(c).strip() for c in df.columns]
    return df


def _find_time_column(df: pd.DataFrame) -> str:
    for cand in ["Time", "time", "Timestamp", "timestamp", "T", "t"]:
        if cand in df.columns:
            return cand
    for col in df.columns:
        if "time" in str(col).lower():
            return col
    raise KeyError("Time ustuni topilmadi.")


def _find_best_match_column(df: pd.DataFrame, human_label: str) -> str:
    """To‘liq mushak nomiga eng mos ustunni (token bo‘yicha) topish."""
    tokens = human_label.lower().split()
    best, best_score = None, -1
    for col in df.columns:
        k = str(col).lower()
        score = sum(tok in k for tok in tokens)
        if score > best_score:
            best, best_score = col, score
    if best_score < max(3, len(tokens)//2):
        raise KeyError(f"Ustun yetarli mos kelmadi: {human_label}")
    return best


def _make_abbrev(label: str) -> str:
    """Mushak nomidan qisqartma (Right Pectoralis Major -> RPM)."""
    tokens = re.findall(r"[A-Za-z]+", label)
    return "".join(tok[0] for tok in tokens).upper()


# -------------------------
# Asosiy funksiya
# -------------------------
def process_emt_pipeline_auto(
    src_emt: str,
    base_output_dir: str,
    muscle_names: List[str],
    a_rest: int = 90,
    b_post: int = 120,
    timezone: str = "Asia/Tashkent",
    date_folder: Optional[str] = None,
) -> Dict[str, object]:
    """
    EMT -> (copy) -> FULL TXT -> per-muscle TXT -> ECG ramp.
    Fayl nomlari avtomatik aniqlanadi (har kimda boshqacha bo'lishi mumkin).
    """
    # 1️⃣ Sana papkasi
    if date_folder is None:
        date_folder = datetime.now(ZoneInfo(timezone)).strftime("%d-%m-%Y")
    workdir = os.path.join(base_output_dir, date_folder)
    os.makedirs(workdir, exist_ok=True)

    # 2️⃣ Fayl nomlari avtomatik shakllanadi
    original_name = os.path.splitext(os.path.basename(src_emt))[0]  # masalan: 0085~SHUKURJONOV KAMOLBEK
    processed_emt_name = f"processed_{original_name}.emt"
    full_txt_name = f"processed_{original_name}_FULL.txt"
    ecg_filename = "ECG.txt"

    emt_path = os.path.join(workdir, processed_emt_name)
    full_txt_path = os.path.join(workdir, full_txt_name)
    ecg_path = os.path.join(workdir, ecg_filename)

    # 3️⃣ Nusxalash
    if not os.path.exists(emt_path):
        if not os.path.exists(src_emt):
            raise FileNotFoundError(f"Source EMT topilmadi: {src_emt}")
        shutil.copy2(src_emt, emt_path)

    # 4️⃣ FULL TXT
    if not os.path.exists(full_txt_path):
        df_full = _parse_bts_ascii_emt(emt_path)
        df_full.to_csv(full_txt_path, sep="\t", index=False)

    # 5️⃣ O‘qish
    df = pd.read_csv(full_txt_path, sep="\t")
    df.columns = [str(c).strip() for c in df.columns]
    time_col = _find_time_column(df)

    # 6️⃣ Mushaklar: alohida TXT va xarita
    out_files, mapping_rows = [], []
    for label in muscle_names:
        colname = _find_best_match_column(df, label)
        abbr = _make_abbrev(label)
        sub = df[[time_col, colname]].copy()
        sub.columns = ["Time", abbr]
        out_path = os.path.join(workdir, f"{abbr}.txt")
        sub.to_csv(out_path, sep="\t", index=False)
        out_files.append(out_path)
        mapping_rows.append({
            "muscle_label": label,
            "column_in_txt": colname,
            "abbr": abbr,
            "output_file": out_path,
        })
    map_path = os.path.join(workdir, "channels_map.csv")
    pd.DataFrame(mapping_rows).to_csv(map_path, index=False)

    # 7️⃣ ECG (a->b HR ramp)
    N = len(df)
    if N < 2:
        raise ValueError("Signal uzunligi juda kichik (kamida 2 qator bo‘lishi kerak).")
    hr_float = np.linspace(a_rest, b_post, N)
    hr_int = np.rint(hr_float).astype(int)
    hr_int[0] = a_rest
    hr_int[-1] = b_post

    if a_rest <= b_post:
        for i in range(1, N):
            if hr_int[i] < hr_int[i - 1]:
                hr_int[i] = hr_int[i - 1]
    else:
        for i in range(1, N):
            if hr_int[i] > hr_int[i - 1]:
                hr_int[i] = hr_int[i - 1]

    ecg_df = pd.DataFrame({"Time": df[time_col], "ECG": hr_int})
    ecg_df.to_csv(ecg_path, sep="\t", index=False)

    return {
        "workdir": workdir,
        "processed_emt": emt_path,
        "full_txt": full_txt_path,
        "ecg": ecg_path,
        "muscle_files": out_files,
        "channels_map": map_path,
    }



# MUSCLES = [
#     "Right Biceps brachii caput longus",
#     "Left Biceps brachii caput longus",
#     "Right Pectoralis Major",
#     "Left Pectoralis Major",
# ]

# res = process_emt_pipeline_auto(
#     src_emt=r"D:/secret/MyData/0085~SHUKURJONOV KAMOLBEK.emt",
#     base_output_dir=r"D:/secret/Script/emt_outputs",
#     muscle_names=MUSCLES,
#     a_rest=90,
#     b_post=120,
# )

# print("📁 Ishchi papka:", res["workdir"])
# print("🧩 FULL TXT:", res["full_txt"])
# print("💓 ECG:", res["ecg"])
# print("💪 Mushak fayllari:")
# for f in res["muscle_files"]:
#     print("  -", f)
# print("🗺️ Map CSV:", res["channels_map"])
